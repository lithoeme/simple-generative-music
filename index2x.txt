<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Generative Music Player</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.27/Tone.min.js"></script>
</head>
<body>
    <h1>Generative Music Player</h1>
    <button onclick="startMusic()">Start Music</button>
    <button onclick="stopMusic()">Stop Music</button>

    <script>
        // Creational Pattern - Factory Method
        class MusicElementFactory {
            static createElement(type, options) {
                switch (type) {
                    case 'synth':
                        return new Tone.Synth(options).toDestination();
                    case 'drum':
                        return new Tone.MembraneSynth(options).toDestination();
                    default:
                        throw new Error('Unknown element type');
                }
            }
        }

        // Structural Pattern - Composite
        class MusicComposition {
            constructor() {
                this.tracks = [];
            }

            addTrack(track) {
                this.tracks.push(track);
            }

            start() {
                this.tracks.forEach(track => track.start());
            }

            stop() {
                this.tracks.forEach(track => track.stop());
            }
        }

        // Structural Pattern - Decorator
        class EffectDecorator {
            constructor(track, effect) {
                this.track = track;
                this.effect = effect;
                this.track.connect(this.effect);
                this.effect.toDestination();
            }

            start() {
                this.track.start();
            }

            stop() {
                this.track.stop();
            }
        }

        // Behavioral Pattern - Strategy
        class PatternStrategy {
            constructor(strategy) {
                this.strategy = strategy;
            }

            generatePattern() {
                return this.strategy.generate();
            }
        }

        class RandomPattern {
            generate() {
                return Math.random() * 100; // Simple random pattern
            }
        }

        class AlgorithmicPattern {
            generate() {
                return Math.sin(Tone.now()); // Algorithmic pattern based on Tone.js time
            }
        }

        // MVC Pattern - View
        class MusicPlayerFacade {
            constructor() {
                this.composition = new MusicComposition();
            }

            addTrack(track) {
                this.composition.addTrack(track);
            }

            start() {
                Tone.Transport.start();
                this.composition.start();
            }

            stop() {
                Tone.Transport.stop();
                this.composition.stop();
            }
        }

        // Global variables
        let musicPlayer;

        // Event-driven Pattern - Command
        async function startMusic() {
            // Ensure audio context is started
            await Tone.start(); // This triggers the audio context startup

            musicPlayer = new MusicPlayerFacade();

            const synth = MusicElementFactory.createElement('synth', { volume: -10 });
            const drum = MusicElementFactory.createElement('drum', { volume: -5 });

            // Using Decorator to add effects
            const synthTrack = new EffectDecorator(synth, new Tone.Reverb());
            const drumTrack = new EffectDecorator(drum, new Tone.Delay());

            musicPlayer.addTrack(synthTrack);
            musicPlayer.addTrack(drumTrack);

            // Random pattern generation strategy
            const randomPatternStrategy = new PatternStrategy(new RandomPattern());
            console.log('Generated Pattern:', randomPatternStrategy.generatePattern());

            musicPlayer.start();
        }

        function stopMusic() {
            if (musicPlayer) {
                musicPlayer.stop();
            }
        }
    </script>
</body>
</html>
